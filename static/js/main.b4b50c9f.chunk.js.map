{"version":3,"sources":["components/AddTodoForm/AddTodoForm.js","components/Todo/Todo.js","components/TodoList/TodoList.js","components/TodosFilter/TodosFilter.js","components/Footer/Footer.js","App.js","index.js"],"names":["AddTodoForm","state","id","content","completed","handleChange","event","setState","target","value","handleSubmit","e","preventDefault","trim","length","props","addTodoHandle","prevState","onSubmit","this","onChange","className","placeholder","React","Component","Todo","isEditing","newTitle","handleEditing","handleEditingBlur","setNewTitle","handleEditingKeyDown","key","todo","remove","toggleComplete","classNames","editing","checked","onClick","type","onDoubleClick","onBlur","onKeyDown","autoFocus","TodoList","todos","map","TodosFilter","showParam","updateTodosToShow","href","selected","Footer","itemLeft","updateTodosShow","handleRemoveCompleted","filter","App","todoToShow","handleRemove","toggleCompleteAll","every","todoView","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b4b50c9f.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddTodoForm extends React.Component {\n  state = {\n    id: 1,\n    content: '',\n    completed: false,\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      content: event.target.value,\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (this.state.content.trim().length !== 0) {\n      this.props.addTodoHandle(this.state);\n\n      this.setState(prevState => ({\n        content: '',\n        id: prevState.id + 1,\n      }));\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          onChange={this.handleChange}\n          value={this.state.content}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    );\n  }\n}\n\nAddTodoForm.propTypes = {\n  addTodoHandle: PropTypes.func.isRequired,\n};\n\nexport default AddTodoForm;\n","/* eslint-disable jsx-a11y/no-autofocus */\nimport React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass Todo extends React.Component {\n  state = {\n    isEditing: false,\n    newTitle: '',\n  }\n\n  handleEditing = (e) => {\n    this.setState({\n      newTitle: e.target.value,\n    });\n  }\n\n  handleEditingBlur = (e) => {\n    const {\n      id,\n      setNewTitle,\n    } = this.props;\n    const newTitle = e.target.value;\n\n    setNewTitle(id, newTitle);\n    this.setState({ isEditing: false });\n  }\n\n  handleEditingKeyDown = (e) => {\n    const {\n      id,\n      setNewTitle,\n    } = this.props;\n\n    const newTitle = e.target.value;\n\n    if (e.key === 'Enter') {\n      if (newTitle.trim().length === 0) {\n        this.setState({ isEditing: false });\n\n        return;\n      }\n\n      setNewTitle(id, newTitle);\n      this.setState({ isEditing: false });\n    }\n\n    if (e.key === 'Escape') {\n      this.setState({ isEditing: false });\n    }\n  }\n\n  render() {\n    const {\n      id,\n      completed,\n      todo,\n      remove,\n      toggleComplete,\n    } = this.props;\n\n    const { isEditing, newTitle } = this.state;\n\n    return (\n      <li className={\n        classNames({\n          completed,\n          editing: isEditing,\n        })\n      }\n      >\n        <div className=\"view\">\n          <input\n            checked={todo.completed}\n            onClick={() => {\n              toggleComplete(id);\n            }}\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={`todo-${id}`}\n          />\n          <label\n            onDoubleClick={() => this.setState({\n              isEditing: true,\n              newTitle: todo.content,\n            })}\n          >\n            {todo.content}\n          </label>\n          <button\n            onClick={() => {\n              remove(id);\n            }}\n            type=\"button\"\n            className=\"destroy\"\n          />\n        </div>\n        {isEditing && (\n          <input\n            type=\"text\"\n            className=\"edit\"\n            value={newTitle}\n            onBlur={this.handleEditingBlur}\n            onChange={this.handleEditing}\n            onKeyDown={this.handleEditingKeyDown}\n            autoFocus\n          />\n        )}\n      </li>\n    );\n  }\n}\n\nTodo.propTypes = {\n  todo: PropTypes.objectOf(\n    PropTypes.shape({\n      content: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n  id: PropTypes.number.isRequired,\n  completed: PropTypes.bool.isRequired,\n  setNewTitle: PropTypes.func.isRequired,\n  remove: PropTypes.func.isRequired,\n  toggleComplete: PropTypes.func.isRequired,\n};\n\nexport default Todo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Todo from '../Todo/Todo';\n\nconst TodoList = ({ todos, remove, toggleComplete, setNewTitle }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <Todo\n        key={todo.id}\n        todo={todo}\n        id={todo.id}\n        completed={todo.completed}\n        remove={remove}\n        toggleComplete={toggleComplete}\n        setNewTitle={setNewTitle}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  remove: PropTypes.func.isRequired,\n  toggleComplete: PropTypes.func.isRequired,\n  setNewTitle: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nconst TodosFilter = ({ showParam, updateTodosToShow }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className={classNames({\n          selected: showParam === 'all',\n        })}\n        onClick={() => (updateTodosToShow('all'))}\n      >\n        All\n      </a>\n    </li>\n    <li>\n      <a\n        href=\"#/active\"\n        className={classNames({\n          selected: showParam === 'active',\n        })}\n        onClick={() => (updateTodosToShow('active'))}\n      >\n        Active\n      </a>\n    </li>\n    <li>\n      <a\n        href=\"#/completed\"\n        className={classNames({\n          selected: showParam === 'completed',\n        })}\n        onClick={() => (updateTodosToShow('completed'))}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  showParam: PropTypes.string.isRequired,\n  updateTodosToShow: PropTypes.func.isRequired,\n};\n\nexport default TodosFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodosFilter from '../TodosFilter/TodosFilter';\n\nconst Footer = (\n  {\n    todos,\n    showParam,\n    itemLeft,\n    updateTodosShow,\n    handleRemoveCompleted,\n  },\n) => (\n\n  <footer className=\"footer\">\n    <span className=\"todo-count\">\n      {itemLeft}\n      {' '}\n      item left\n    </span>\n    <TodosFilter\n      showParam={showParam}\n      updateTodosToShow={updateTodosShow}\n    />\n    {\n      (todos.filter(todo => (\n        todo.completed)).length)\n        ? (\n          <button\n            onClick={handleRemoveCompleted}\n            type=\"button\"\n            className=\"clear-completed\"\n          >\n            Clear completed\n          </button>\n        )\n        : ('')\n    }\n  </footer>\n);\n\nFooter.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      content: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n  showParam: PropTypes.string.isRequired,\n  itemLeft: PropTypes.number.isRequired,\n  updateTodosShow: PropTypes.func.isRequired,\n  handleRemoveCompleted: PropTypes.func.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\n\nimport AddTodoForm from './components/AddTodoForm/AddTodoForm';\nimport TodoList from './components/TodoList/TodoList';\nimport Footer from './components/Footer/Footer';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    showParam: 'all',\n  };\n\n  addTodoHandle = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  }\n\n  updateTodosShow = (todoToShow) => {\n    this.setState({ showParam: todoToShow });\n  }\n\n  handleRemove = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => (\n        todo.id !== id\n      )),\n    }));\n  }\n\n  handleRemoveCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => (\n        !todo.completed\n      )),\n    }));\n  }\n\n  toggleComplete = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  toggleCompleteAll = () => {\n    if (this.state.todos.every(todo => (todo.completed))) {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: false,\n        })),\n      }));\n    } else {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: true,\n        })),\n      }));\n    }\n  }\n\n  setNewTitle = (id, newTitle) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            content: newTitle,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  render() {\n    const { todos, showParam } = this.state;\n    let todoView = [];\n    const itemLeft = todos.filter(todo => (\n      !todo.completed)).length;\n\n    switch (showParam) {\n      case 'active':\n        todoView = [...todos].filter(todo => (\n          !todo.completed\n        ));\n        break;\n      case 'completed':\n        todoView = [...todos].filter(todo => (\n          todo.completed\n        ));\n        break;\n      default:\n        todoView = [...todos];\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <AddTodoForm\n            addTodoHandle={this.addTodoHandle}\n          />\n        </header>\n        {(todos.length)\n          ? (\n            <>\n              <section className=\"main\">\n                <input\n                  onClick={this.toggleCompleteAll}\n                  checked={!itemLeft}\n                  type=\"checkbox\"\n                  id=\"toggle-all\"\n                  className=\"toggle-all\"\n                />\n                <label htmlFor=\"toggle-all\">Mark all as complete</label>\n                <TodoList\n                  todos={todoView}\n                  remove={this.handleRemove}\n                  toggleComplete={this.toggleComplete}\n                  setNewTitle={this.setNewTitle}\n                />\n              </section>\n              <Footer\n                todos={todos}\n                showParam={showParam}\n                itemLeft={itemLeft}\n                updateTodosShow={this.updateTodosShow}\n                handleRemoveCompleted={this.handleRemoveCompleted}\n              />\n            </>\n          ) : ''}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}