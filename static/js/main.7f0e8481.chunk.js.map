{"version":3,"sources":["components/AddTodoForm/AddTodoForm.js","components/Todo/Todo.js","components/TodoList/TodoList.js","components/TodosFilter/TodosFilter.js","components/Footer/Footer.js","App.js","index.js"],"names":["AddTodoForm","state","content","id","completed","handleChange","event","setState","target","value","trim","handleSubmit","e","preventDefault","props","addTodo","prevState","onSubmit","this","onChange","className","placeholder","React","Component","Todo","isEditing","newTitle","handleEditing","handleEditingBlur","setNewTitle","handleEditingKeyDown","key","length","todo","remove","toggleComplete","classNames","editing","checked","onClick","type","onDoubleClick","onBlur","onKeyDown","autoFocus","TodoList","todos","map","TodosFilter","updateTodosToShow","href","Footer","itemLeft","updateTodosShow","handleRemoveCompleted","filter","App","showParam","todoToShow","handleRemove","toggleCompleteAll","every","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","todoView","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7f0e8481.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddTodoForm extends React.Component {\n  state = {\n    content: '',\n    id: 1,\n    completed: false,\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      content: event.target.value.trim(),\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (this.state.content) {\n      this.props.addTodo(this.state);\n\n      this.setState(prevState => ({\n        content: '',\n        id: prevState.id + 1,\n      }));\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          onChange={this.handleChange}\n          value={this.state.content}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    );\n  }\n}\n\nAddTodoForm.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default AddTodoForm;\n","/* eslint-disable jsx-a11y/no-autofocus */\nimport React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass Todo extends React.Component {\n  state = {\n    isEditing: false,\n    newTitle: '',\n  }\n\n  handleEditing = (e) => {\n    this.setState({\n      newTitle: e.target.value,\n    });\n  }\n\n  handleEditingBlur = (e) => {\n    const {\n      id,\n      setNewTitle,\n    } = this.props;\n    const newTitle = e.target.value;\n\n    setNewTitle(id, newTitle);\n    this.setState({ isEditing: false });\n  }\n\n  handleEditingKeyDown = (e) => {\n    const {\n      id,\n      setNewTitle,\n    } = this.props;\n\n    const newTitle = e.target.value;\n\n    if (e.key === 'Enter') {\n      if (newTitle.trim().length === 0) {\n        this.setState({ isEditing: false });\n\n        return;\n      }\n\n      setNewTitle(id, newTitle);\n      this.setState({ isEditing: false });\n    }\n\n    if (e.key === 'Escape') {\n      this.setState({ isEditing: false });\n    }\n  }\n\n  render() {\n    const {\n      id,\n      completed,\n      todo,\n      remove,\n      toggleComplete,\n    } = this.props;\n\n    const { isEditing, newTitle } = this.state;\n\n    return (\n      <li className={\n        classNames({\n          completed,\n          editing: isEditing,\n        })\n      }\n      >\n        <div className=\"view\">\n          <input\n            checked={todo.completed}\n            onClick={() => {\n              toggleComplete(id);\n            }}\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={`todo-${id}`}\n          />\n          <label\n            onDoubleClick={() => this.setState({\n              isEditing: true,\n              newTitle: todo.content,\n            })}\n          >\n            {todo.content}\n          </label>\n          <button\n            onClick={() => {\n              remove(id);\n            }}\n            type=\"button\"\n            className=\"destroy\"\n          />\n        </div>\n        {isEditing && (\n          <input\n            type=\"text\"\n            className=\"edit\"\n            value={newTitle}\n            onBlur={this.handleEditingBlur}\n            onChange={this.handleEditing}\n            onKeyDown={this.handleEditingKeyDown}\n            autoFocus\n          />\n        )}\n      </li>\n    );\n  }\n}\n\nTodo.propTypes = {\n  todo: PropTypes.objectOf(\n    PropTypes.shape({\n      content: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n  id: PropTypes.number.isRequired,\n  completed: PropTypes.bool.isRequired,\n  setNewTitle: PropTypes.func.isRequired,\n  remove: PropTypes.func.isRequired,\n  toggleComplete: PropTypes.func.isRequired,\n};\n\nexport default Todo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Todo from '../Todo/Todo';\n\nconst TodoList = ({ todos, remove, toggleComplete, setNewTitle }) => (\n  <ul className=\"todo-list\">\n    {todos.map(todo => (\n      <Todo\n        key={todo.id}\n        todo={todo}\n        id={todo.id}\n        completed={todo.completed}\n        remove={remove}\n        toggleComplete={toggleComplete}\n        setNewTitle={setNewTitle}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    completed: PropTypes.bool.isRequired,\n  })).isRequired,\n  remove: PropTypes.func.isRequired,\n  toggleComplete: PropTypes.func.isRequired,\n  setNewTitle: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodosFilter = ({ updateTodosToShow }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        onClick={() => (updateTodosToShow('all'))}\n      >\n        All\n      </a>\n    </li>\n    <li>\n      <a\n        href=\"#/active\"\n        onClick={() => (updateTodosToShow('active'))}\n      >\n        Active\n      </a>\n    </li>\n    <li>\n      <a\n        href=\"#/completed\"\n        onClick={() => (updateTodosToShow('completed'))}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n\nTodosFilter.propTypes = {\n  updateTodosToShow: PropTypes.func.isRequired,\n};\n\nexport default TodosFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodosFilter from '../TodosFilter/TodosFilter';\n\nconst Footer = (\n  {\n    todos,\n    itemLeft,\n    updateTodosShow,\n    handleRemoveCompleted,\n  },\n) => (\n\n  <footer className=\"footer\">\n    <span className=\"todo-count\">\n      {itemLeft}\n      item left\n    </span>\n    <TodosFilter updateTodosToShow={updateTodosShow} />\n    {\n      (todos.filter(todo => (\n        todo.completed)).length)\n        ? (\n          <button\n            onClick={handleRemoveCompleted}\n            type=\"button\"\n            className=\"clear-completed\"\n          >\n            Clear completed\n          </button>\n        )\n        : ('')\n    }\n  </footer>\n);\n\nFooter.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      content: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ).isRequired,\n  itemLeft: PropTypes.number.isRequired,\n  updateTodosShow: PropTypes.func.isRequired,\n  handleRemoveCompleted: PropTypes.func.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\n\nimport AddTodoForm from './components/AddTodoForm/AddTodoForm';\nimport TodoList from './components/TodoList/TodoList';\nimport Footer from './components/Footer/Footer';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    showParam: 'all',\n  };\n\n  componentDidMount() {\n    const storageTodos = JSON.parse(localStorage.getItem('todos'));\n\n    if (storageTodos) {\n      this.setState({\n        todos: storageTodos,\n      });\n    }\n  }\n\n  componentDidUpdate(prevState) {\n    const { todos } = this.state;\n\n    if (this.state.todos !== prevState.todos) {\n      localStorage.setItem('todos', JSON.stringify(todos));\n    }\n  }\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  }\n\n  updateTodosShow = (todoToShow) => {\n    this.setState({ showParam: todoToShow });\n  }\n\n  handleRemove = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => (\n        todo.id !== id\n      )),\n    }));\n  }\n\n  handleRemoveCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => (\n        !todo.completed\n      )),\n    }));\n  }\n\n  toggleComplete = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  toggleCompleteAll = () => {\n    if (this.state.todos.every(todo => (todo.completed))) {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: false,\n        })),\n      }));\n    } else {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: true,\n        })),\n      }));\n    }\n  }\n\n  setNewTitle = (id, newTitle) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            content: newTitle,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  render() {\n    const { todos, showParam } = this.state;\n    let todoView = [];\n    const itemLeft = todos.filter(todo => (\n      !todo.completed)).length;\n\n    if (showParam === 'active') {\n      todoView = [...todos].filter(todo => (\n        !todo.completed\n      ));\n    }\n\n    if (showParam === 'completed') {\n      todoView = [...todos].filter(todo => (\n        todo.completed\n      ));\n    } else {\n      todoView = [...todos];\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <AddTodoForm addTodo={this.addTodo} />\n        </header>\n        {(todos.length)\n          ? (\n            <>\n              <section className=\"main\">\n                <input\n                  onClick={this.toggleCompleteAll}\n                  checked={!itemLeft}\n                  type=\"checkbox\"\n                  id=\"toggle-all\"\n                  className=\"toggle-all\"\n                />\n                <label htmlFor=\"toggle-all\">Mark all as complete</label>\n                <TodoList\n                  todos={todoView}\n                  remove={this.handleRemove}\n                  toggleComplete={this.toggleComplete}\n                  setNewTitle={this.setNewTitle}\n                />\n              </section>\n              <Footer\n                todos={todos}\n                itemLeft={itemLeft}\n                updateTodosShow={this.updateTodosShow}\n                handleRemoveCompleted={this.handleRemoveCompleted}\n              />\n            </>\n          ) : ''}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}